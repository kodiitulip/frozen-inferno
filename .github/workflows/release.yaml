name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number in the format `v1.2.3`"
        required: true
        type: string
      build_for_windows:
        description: "Build for Windows"
        default: true
        type: boolean
      build_for_linux:
        description: "Build for Linux"
        default: true
        type: boolean
      build_for_web:
        description: "Build for web"
        default: true
        type: boolean
      upload_to_github:
        description: "Upload to GitHub releases"
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  godot_version: 4.5.0
  app_binary_name: frozen-inferno

jobs:
  # Determine the version number for this workflow.
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Determine version number
        id: tag
        run: echo "ref=${GITHUB_REF#refs/*/}" >> "${GITHUB_OUTPUT}"
    outputs:
      # Use the input from workflow dispatch, or fall back to the git ref.
      version: ${{ inputs.version || steps.ref.outputs.ref }}

  # Build and package a release for each platform.
  build:
    needs:
      - get-version
    env:
      version: ${{ needs.get-version.outputs.version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        include:
          - platform: web
            package_ext: .zip
            runner: ubuntu-latest

          - platform: linux
            package_ext: .zip
            runner: ubuntu-latest

          - platform: windows
            binary_ext: .exe
            package_ext: .zip
            runner: windows-latest
    runs-on: ${{ matrix.runner }}
    permissions:
      # Required to create a GitHub release: <https://docs.github.com/en/rest/releases/releases#create-a-release>.
      contents: write
    defaults:
      run:
        shell: bash

    steps:
      - name: Set up environment
        run: |
          # Default values:
          echo "app_package_name=${app_binary_name:=${{ env.app_binary_name }}}" >> "${GITHUB_ENV}"

          # File paths:
          echo "app=tmp/app/${app_package_name}" >> "${GITHUB_ENV}"
          echo "package=${app_package_name}-"'${{ matrix.platform }}${{ matrix.package_ext }}' >> "${GITHUB_ENV}"

          # Check if building for this platform is enabled.
          echo 'is_platform_enabled=${{
            (matrix.platform == 'web' && inputs.build_for_web) ||
            (matrix.platform == 'linux' && inputs.build_for_linux) ||
            (matrix.platform == 'windows' && inputs.build_for_windows)
          }}' >> "${GITHUB_ENV}"

      - name: Checkout repository
        if: ${{ env.is_platform_enabled == 'true' }}
        uses: actions/checkout@v4

      - name: Setup Godot Project Version
        if: ${{ env.is_platform_enabled == 'true' }}
        run: sed -i 's/config\/version="[^"]*"/config\/version="${{ env.version }}"/' ./project.godot

      - name: Setup Godot
        if: ${{ env.is_platform_enabled == 'true' }}
        uses: chickensoft-games/setup-godot@v2
        with:
          version: ${{ env.godot_version }}
          use-dotnet: false
          include-templates: true

      - name: Verify Setup
        if: ${{ env.is_platform_enabled == 'true' }}
        run: godot --version

      - name: Prepare output directories
        if: ${{ env.is_platform_enabled == 'true' }}
        run: rm -rf tmp; mkdir -p '${{ env.app }}'

      - name: Build Project (Linux)
        if: ${{ env.is_platform_enabled == 'true' && matrix.platform == 'linux' }}
        run: |
          godot --import ./project.godot --quiet --headless --export-release ${{ matrix.platform }} ${{ env.app }}/${{ env.package }}

      - name: Upload package to workflow artifacts
        if: ${{ env.is_platform_enabled == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.app }}/${{ env.package }}
          name: package-${{ matrix.platform }}
          retention-days: 1

      - name: Upload package to GitHub release
        if: ${{ env.is_platform_enabled == 'true' && env.upload_to_github == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.app }}/${{ env.package }}
          asset_name: ${{ env.package }}
          release_name: ${{ env.version }}
          tag: ${{ env.version }}
          overwrite: true
